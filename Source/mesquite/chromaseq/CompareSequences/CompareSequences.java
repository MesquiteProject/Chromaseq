/* Mesquite source code.  Copyright 1997-2010 W. Maddison and D. Maddison.Version 2.74, October 2010.Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.CompareSequences;/*~~  */import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.taxa.Taxa;import mesquite.categ.lib.*;/* ======================================================================== */public class CompareSequences extends DNADataUtility { 	CharacterData data;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		return true;	}	/*.................................................................................................................*/	/** if returns true, then requests to remain on even after operateData is called.  Default is false*/	public boolean pleaseLeaveMeOn(){		return false;	}	/** Called to operate on the data in all cells.  Returns true if data altered*/	public boolean operateOnData(CharacterData data){		this.data = data;		Taxa taxa = data.getTaxa();		DNAData dnaData = (DNAData)data;		String s = "";		boolean anySelected = taxa.anySelected();		if (!anySelected)			return false;		int numSel = taxa.numberSelected();		int[] selected = new int[numSel];		long[] states = new long[numSel];		int count = 0;		logln("Comparing ");		for (int it = 0; it<taxa.getNumTaxa() && count<numSel; it++){			if (taxa.getSelected(it)){				selected[count++] = it;				logln("     (" + (it+1) + ") " + taxa.getTaxonName(it));			}		}		int lastBlank = -2;		logln("");		for (int ic = 0; ic<dnaData.getNumChars(); ic++){			long first = 0L;			boolean difference = false;			int thisBlank = -2;			int withState = -2;			for (int is=0; is<numSel; is++){				long rawState = dnaData.getState(ic, selected[is]) & CategoricalState.dataBitsMask;				states[is] = rawState;				if (is == 0)					first = states[is];				else if (first != states[is]){					difference = true;					if (((CategoricalState.statesBitsMask & first) == 0L && (first & CategoricalState.unassigned) == 0L) && selected.length <= 2){						thisBlank = 0;  //meaning first is blank						withState = numSel -1;					}					else if (((CategoricalState.statesBitsMask & states[is]) == 0L && (states[is] & CategoricalState.unassigned) == 0L) && selected.length <= 2){						thisBlank = is;  //meaning other is blank						withState = 0;					}					else 						thisBlank = -2;  //meaning no lonestate				}			}			if (difference){				if (thisBlank>-2){  //one has blank					if (thisBlank == lastBlank) {						log(DNAData.getIUPACSymbol(states[withState]));					}					else {						logln("");						log("From site " + (ic+1) + " in " + (selected[withState]+1) + " " + taxa.getTaxonName(selected[withState]) + ": ");						log(DNAData.getIUPACSymbol(states[withState]));						lastBlank = thisBlank;					}				}				else {					lastBlank = -2;					logln("");					String st = "Site " + (ic+1) + ": ";					for(int it = 0 ; it<numSel; it++){						st += " " + DNAData.getIUPACSymbol(states[it]);					}					log(st);				}			}			else if ((CategoricalState.statesBitsMask & first) != 0L) //not both blank				lastBlank = -2;		}		return true;	}	/*.................................................................................................................*/	public boolean isPrerelease() {		return false;	}	/*.................................................................................................................*/	public String getName() {		return "Show Differences of Selected Sequences";	}	/*.................................................................................................................*/	public String getExplanation() {		return "Compares nucleotide bases of selected taxa.";	}}