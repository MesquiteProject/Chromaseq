/* Mesquite Chromaseq source code.  Copyright 2005-2011 David Maddison and Wayne Maddison.Version 1.0   December 2011Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.ExportForGenBankUpdates;/*~~  */import java.awt.Button;import java.awt.Checkbox;import java.awt.Choice;import java.awt.Label;import java.awt.TextArea;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.util.Vector;import mesquite.assoc.lib.TaxaAssociation;import mesquite.categ.lib.DNAData;import mesquite.categ.lib.DNAState;import mesquite.categ.lib.MolecularData;import mesquite.categ.lib.MolecularState;import mesquite.chromaseq.lib.ChromaseqUtil;import mesquite.chromaseq.lib.ChromatogramFileNameParser;import mesquite.chromaseq.lib.PrimerInfoSource;import mesquite.chromaseq.lib.SequenceProfile;import mesquite.chromaseq.lib.SequenceProfileManager;//tbl2asn -t template.sbt.txt -p submission -a s2 -V v -k m /* ============  a file interpreter for DNA/RNA  Fasta files ============*/import mesquite.io.lib.InterpretFasta;import mesquite.lib.Arguments;import mesquite.lib.Associable;import mesquite.lib.EmployeeNeed;import mesquite.lib.ExporterDialog;import mesquite.lib.Listable;import mesquite.lib.MesquiteBoolean;import mesquite.lib.MesquiteFile;import mesquite.lib.MesquiteInteger;import mesquite.lib.MesquiteMessage;import mesquite.lib.MesquiteProject;import mesquite.lib.MesquiteString;import mesquite.lib.MesquiteStringBuffer;import mesquite.lib.MesquiteThread;import mesquite.lib.MesquiteTrunk;import mesquite.lib.Parser;import mesquite.lib.StringUtil;import mesquite.lib.characters.CharacterData;import mesquite.lib.characters.CharacterPartition;import mesquite.lib.characters.CharactersGroup;import mesquite.lib.duties.CharactersManager;import mesquite.lib.duties.*;import mesquite.lib.misc.VoucherInfoFromOTUIDDB;import mesquite.lib.taxa.Taxa;import mesquite.lib.taxa.Taxon;import mesquite.lib.ui.ExtensibleDialog;import mesquite.lib.ui.RadioButtons;import mesquite.lib.ui.SingleLineTextField;import mesquite.lib.ui.TextCanvasWithButtons;public class ExportForGenBankUpdates extends FileInterpreterI  {	OTUIDCodeInfoCoord voucherInfoTask;		static int FROMTAXONNAMES = 0;	static int FROMALTERNATIVENAMES = 1;	static int FROMVOUCHERDB = 2;	int infoSource = FROMTAXONNAMES;	public void getEmployeeNeeds(){  //This gets called on startup to harvest information; override this and inside, call registerEmployeeNeed		EmployeeNeed e = registerEmployeeNeed(OTUIDCodeInfoCoord.class, "Voucher information is needed for FASTA export for GenBank submissions.",				"This is activated automatically when you choose this exporter.");	}			/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		voucherInfoTask = (OTUIDCodeInfoCoord)hireEmployee(OTUIDCodeInfoCoord.class, null);		loadPreferences();		return voucherInfoTask != null;	}	/*.................................................................................................................*/	public void processSingleXMLPreference (String tag, String content) {		if ("writeOnlySelectedTaxa".equalsIgnoreCase(tag))			writeOnlySelectedTaxa=MesquiteBoolean.fromTrueFalseString(content);		if ("infoSource".equalsIgnoreCase(tag))			infoSource=MesquiteInteger.fromString(content);	}	/*.................................................................................................................*/	public String preparePreferencesForXML () {		StringBuffer buffer = new StringBuffer(60);			StringUtil.appendXMLTag(buffer, 2, "writeOnlySelectedTaxa",writeOnlySelectedTaxa);		StringUtil.appendXMLTag(buffer, 2, "infoSource",infoSource);		return buffer.toString();	}			/*.................................................................................................................*/	public boolean canImport() {  		return false;  //	}	public boolean canImport(String arguments){		return false;	}	public void readFile(MesquiteProject mf, MesquiteFile mNF, String arguments) {			}	Choice sequenceSpecificationChoice;	ExporterDialog exportDialog;	SingleLineTextField executablePathField =  null;	/*.................................................................................................................*/	public boolean getExportOptions(boolean taxaSelected){		MesquiteInteger buttonPressed = new MesquiteInteger(1);		ExtensibleDialog dialog = new ExtensibleDialog(containerOfModule(), "Export file for GenBank Updates",buttonPressed);  //MesquiteTrunk.mesquiteTrunk.containerOfModule()		dialog.appendToHelpString("Choose the options for exporting to a tab-delimited file a list of information for GenBank records.  "				+ "The first column will be accession number, as stored for a matrix and taxon in this file.  If the source of information to be included is taxon names, then "				+ "the second column will be the taxon names, and the \"organism\" field will be the only aspect of the GenBank record that will be updated. "				+ "If the source of information to be included is alternative names, then the second column will be the alternative names, again to update only the organism"				+ " field in the record.  If \"from GenBank Voucher Info File\" is chosen, then all columns in that file will be included with each record.  That will allow you"				+ " to update aspects other than the organism field. ");				dialog.addLabel("Source of information to be included");		RadioButtons sourceRadioButtons =  dialog.addRadioButtons(new String[] {"taxon names",  "alternative names", "from GenBank Voucher Info File"}, infoSource);				dialog.addHorizontalLine(1);				Checkbox selectedOnlyCheckbox = dialog.addCheckBox("Selected taxa only", writeOnlySelectedTaxa);  		dialog.completeAndShowDialog(taxaSelected);		dialog.completeAndShowDialog(true);		boolean success=(buttonPressed.getValue()== dialog.defaultOK);		if (success)  {			infoSource = sourceRadioButtons.getValue();			writeOnlySelectedTaxa = selectedOnlyCheckbox.getState();		}		storePreferences();  // do this here even if Cancel pressed as the File Locations subdialog box might have been used		dialog.dispose();		return success;	}		/*.................................................................................................................*/	public boolean canExportEver() {  		return true;  //	}	/*.................................................................................................................*/	public boolean canExportProject(MesquiteProject project) {  		return project.getNumberCharMatrices(DNAState.class) > 0;  //	}	/*.................................................................................................................*/	public boolean canExportData(Class dataClass) {  		return (dataClass==DNAState.class);	}	/*.................................................................................................................*/	public CharacterData createData(CharactersManager charTask, Taxa taxa) {  		return charTask.newCharacterData(taxa, 0, DNAData.DATATYPENAME);  //	}	/*.................................................................................................................*/	public String preferredDataFileExtension() {  		return "txt";	}	/*.................................................................................................................*/	public CharacterData findDataToExport(MesquiteFile file, String arguments) { 		return getProject().chooseData(containerOfModule(), file, null, DNAState.class, "Select data to export");	}	protected String getGenBankAccession(Taxa taxa, int it, CharacterData data){		if (data==null || taxa==null)			return "";		Taxon taxon = data.getTaxa().getTaxon(it);		Associable tInfo = data.getTaxaInfo(false);		if (tInfo != null && taxon != null) {			return (String)tInfo.getAssociatedObject(MolecularData.genBankNumberRef, it);		}		return "";	}	/*.................................................................................................................*/	public synchronized boolean exportFile(MesquiteFile file, String arguments) { //if file is null, consider whole project open to export		Arguments args = new Arguments(new Parser(arguments), true);		//		boolean usePrevious = args.parameterExists("usePrevious");		if (!MesquiteThread.isScripting())			if (!getExportOptions(true))				return false;		boolean outputHeaders = false;		MesquiteStringBuffer outputBuffer = new MesquiteStringBuffer(500);		outputBuffer.append("acc. num.\t");		int count = 0;		for (int taxaNumber=0; taxaNumber<getProject().getNumberTaxas(file); taxaNumber++) {			Taxa taxa = (Taxa)getProject().getTaxa(file,taxaNumber);			int numMatrices = getProject().getNumberCharMatrices(null, taxa, MolecularState.class, true);			for (int iM = 0; iM < numMatrices; iM++){				CharacterData data = getProject().getCharacterMatrixVisible(taxa, iM, MolecularState.class);				if (data != null) {					int numTaxa = taxa.getNumTaxa();					for (int it = 0; it<numTaxa; it++) {						if (!writeOnlySelectedTaxa || taxa.getSelected(it)){							if (infoSource==FROMVOUCHERDB) {								if (!outputHeaders) {									String s = voucherInfoTask.getVoucherInfoHeadings(ChromaseqUtil.getStringAssociated(taxa, VoucherInfoFromOTUIDDB.voucherDBRef, it));									if (StringUtil.notEmpty(s))										outputBuffer.append(s+"\r");									else										outputBuffer.append("\r");									outputHeaders = true;								}								String voucherID = ChromaseqUtil.getStringAssociated(taxa, VoucherInfoFromOTUIDDB.voucherCodeRef, it);								VoucherInfoFromOTUIDDB vi= voucherInfoTask.getVoucherInfo(ChromaseqUtil.getStringAssociated(taxa, VoucherInfoFromOTUIDDB.voucherDBRef, it), voucherID);								String genBankAccession = getGenBankAccession(taxa, it, data);								if (StringUtil.notEmpty(genBankAccession)) {									outputBuffer.append(genBankAccession + "\t");									if (vi !=null) {										outputBuffer.append(vi.toGenBankUpdateString());									} 									outputBuffer.append("\r");								}							} else if (infoSource==FROMTAXONNAMES) {								outputBuffer.append(taxa.getTaxonName(it) + "\r");							} else if (infoSource==FROMALTERNATIVENAMES){								outputBuffer.append(taxa.getTaxonName(it) + "\r");							}						}					}				}			}		}		saveExportedFileWithExtension(outputBuffer, arguments, "txt");		return true;	}		/*.................................................................................................................*/	public String getName() {		return "Tab-delimited Text File for GenBank Updates";	}	/*.................................................................................................................*/	/** returns an explanation of what the module does.*/	public String getExplanation() {		return "Exports a tab-delimited text file for GenBank updates." ;	}	/*.................................................................................................................*/	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE integer	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite.	 * If a NEGATIVE integer, then the number refers to the local version of the package, e.g. a third party package*/	public int getVersionOfFirstRelease(){		return NEXTRELEASE;  	}}