/* Mesquite Chromaseq source code.  Copyright 2005-2011 David Maddison and Wayne Maddison.Version 1.0   December 2011Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.ColorCSeqMarked; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.categ.lib.*;import mesquite.chromaseq.lib.*;//make display of ambiguities optional!!!!!/** ======================================================================== */public class ColorCSeqMarked extends DataWindowAssistantID implements CellColorer, CellColorerTaxa {	CharacterData data;	MesquiteTable table;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		return true;	}	private int getFlag(int ic, int it){		if (data == null)			return 0;		if (ic<0){  //taxon			Associable tInfo = data.getTaxaInfo(false);			if (tInfo == null)				return 0;			long c = ChromaseqUtil.getLongAssociated(tInfo,ChromaseqUtil.chromaseqCellFlagsNameRef, it);			if (MesquiteLong.isCombinable(c))				return (int)c;		}		return MesquiteInteger.unassigned;	}	public void viewChanged(){	}	boolean wasActive = false;	public boolean setActiveColors(boolean active){		wasActive = active;		return true; 	}	/*.................................................................................................................*/	public boolean isSubstantive(){		return false;	}	Associable tInfoData;	public void setTableAndData(MesquiteTable table, CharacterData data){		this.table = table;		this.data = data;		if (data != null)			tInfoData = data.getTaxaInfo(false);	}	/*.................................................................................................................*/	public boolean hasDisplayModifications(){		return false;	}	public String getColorsExplanation(){		return null;	}	public String getCellString(int ic, int it){		if (it<0 || ic<0 ||  !isActive())			return null;		String expl = "";		if (ic<0)   {			int color = getFlag(ic, it);				if (color == 1) //trimmable					expl += " Trimmable.";				else if (color == 2) //touched					expl += " Modified by hand.";				else if (color == 3) //please check					expl += " Please recheck!";				else if (color == 4) //please check					expl += " Please recheck!";						}		return expl;	}	ColorRecord[] legend;	public ColorRecord[] getLegendColors(){		if (legend == null) {			legend = new ColorRecord[4];			legend[0] = AceFile.colorTrimmable;			legend[1] = AceFile.colorManuallyChanged;			legend[2] = AceFile.colorPleaseRecheck;			legend[3] = AceFile.colorPleaseRecheck;		}		return legend;	}	/*.................................................................................................................*/	public Color getCellColor(int ic, int it){		if (it < 0) 			return Color.white;		if (ic<0)  {			int color = getFlag(ic, it);				if (color == 1) //trimmable					return AceFile.colorTrimmable.getColor();				else if (color == 2) //touched					return AceFile.colorManuallyChanged.getColor();				else if (color == 3) //please check					return AceFile.colorPleaseRecheck.getColor();				else if (color == 4) //please check					return AceFile.colorPleaseRecheck2.getColor();				else if (color == 5) //please check					return AceFile.colorPleaseRecheck3.getColor();		}			return Color.white;	}	/*.................................................................................................................*/	/** Returns CompatibilityTest so other modules know if this is compatible with some object. */	public CompatibilityTest getCompatibilityTest(){		return new RequiresAnyDNAData();	}	/*.................................................................................................................*/	/*.................................................................................................................*/	public String getName() {		return "Chromaseq Markings";	}	/*.................................................................................................................*/	public String getVersion() {		return null;	}	/*.................................................................................................................*/	public String getExplanation() {		return "Colors taxon names by their markings from chromaseq.";	}}