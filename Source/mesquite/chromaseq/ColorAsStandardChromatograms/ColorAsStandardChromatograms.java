/* Mesquite Chromaseq source code.  Copyright 2005-2011 David Maddison and Wayne Maddison.Version 1.0   December 2011Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.ColorAsStandardChromatograms; import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.categ.lib.*;/* ======================================================================== */public class ColorAsStandardChromatograms extends DataWindowAssistantID implements CellColorer, CellColorerMatrix {	MesquiteTable table;	CharacterData data;	Color Acolor, Ccolor, Gcolor, Tcolor, AGcolor, CTcolor;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		setColors();		return true;	}	public void setColors(){		Acolor = Color.green;		Gcolor = Color.black;		Ccolor = Color.blue;		Tcolor = Color.red;		AGcolor = Color.lightGray;		CTcolor = Color.lightGray;	}	public boolean setActiveColors(boolean active){		setActive(true);		return true; 	}	public CompatibilityTest getCompatibilityTest(){		return new RequiresAnyDNAData();	}	/*.................................................................................................................*/	public boolean isSubstantive(){		return false;	}	/*.................................................................................................................*/	public void setTableAndData(MesquiteTable table, CharacterData data){		this.table = table;		this.data = data;	}	/*.................................................................................................................*/	public String getName() {		return "Color Standard Chromatograms";	}	public String getNameForMenuItem() {		return "Standard Chromatogram Colors";	}	/*.................................................................................................................*/	public String getExplanation() {		return "Colors the cells of a character matrix using the standard colors used in chromatogram programs (green, blue, black, red).";	}	/*.................................................................................................................*/	public void viewChanged(){	}	public String getCellString(int ic, int it){		if (!isActive())			return null;		if (ic < 0 && it>=0)  {			TaxaPartition part = (TaxaPartition)data.getTaxa().getCurrentSpecsSet(TaxaPartition.class);			if (part!=null){				TaxaGroup mi = (TaxaGroup)part.getProperty(it);				if (mi!=null)					return "This taxon belongs to the group " + mi.getName();			}		}		else if (ic>=0 && it<0) {  			CharacterPartition part = (CharacterPartition)data.getCurrentSpecsSet(CharacterPartition.class);			if (part!=null){				CharactersGroup mi = (CharactersGroup)part.getProperty(ic);				if (mi!=null)					return "This character belongs to the group " + mi.getName();			}		}		return "Colored to show state of character";	}	ColorRecord[] legend;	public ColorRecord[] getLegendColors(){		if (data == null)			return null;		legend = null;		if (data instanceof DNAData){			legend = new ColorRecord[4];			legend[0] = new ColorRecord(Acolor, DNAData.getDefaultStateSymbol(0));			legend[1] = new ColorRecord(Ccolor, DNAData.getDefaultStateSymbol(1));			legend[2] = new ColorRecord(Gcolor, DNAData.getDefaultStateSymbol(2));			legend[3] = new ColorRecord(Tcolor, DNAData.getDefaultStateSymbol(3));		}		return legend;	}	public String getColorsExplanation(){		if (data == null)			return null;		if (data.getClass() == CategoricalData.class){			return "Colors of states may vary from character to character";		}		return null;	}	public Color getCellColor(int ic, int it){		if (ic < 0 && it>=0)  {			TaxaPartition part = (TaxaPartition)data.getTaxa().getCurrentSpecsSet(TaxaPartition.class);			if (part!=null){				TaxaGroup mi = (TaxaGroup)part.getProperty(it);				if (mi!=null)					return mi.getColor();			}			return null;		}		if (ic>=0 && it<0) {  			CharacterPartition part = (CharacterPartition)data.getCurrentSpecsSet(CharacterPartition.class);			if (part!=null){				CharactersGroup mi = (CharactersGroup)part.getProperty(ic);				if (mi!=null)					return mi.getColor();			}			return null;		}		if (data == null)			return null;		else {			if (data instanceof DNAData){				DNAData dData = (DNAData)data;				long state=dData.getState(ic, it);				state =  state & CategoricalState.statesBitsMask;				if (state == DNAState.A)					return Acolor;				else if (state == DNAState.G)					return Gcolor;				else if (state == (DNAState.A | DNAState.G))					return AGcolor;				else if (state == DNAState.C)					return Ccolor;				else if (state == DNAState.T)					return Tcolor;				else if (state == (DNAState.C | DNAState.T))					return CTcolor;				else if (dData.isInapplicable(ic,it))					return ColorDistribution.inapplicable;				else					return ColorDistribution.unassigned;			}			return data.getColorOfStates(ic, it);		}	}	public String getParameters(){		if (isActive())			return getName();		return null;	}}