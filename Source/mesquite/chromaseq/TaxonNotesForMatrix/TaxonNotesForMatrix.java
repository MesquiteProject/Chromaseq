/* Mesquite Chromaseq source code.  Copyright 2005-2011 David Maddison and Wayne Maddison.Version 1.0   December 2011Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.TaxonNotesForMatrix; import mesquite.categ.lib.RequiresAnyDNAData;// need to store and retrieve read dataimport mesquite.chromaseq.lib.ChromaseqUtil;import mesquite.lib.Associable;import mesquite.lib.CompatibilityTest;import mesquite.lib.characters.CharacterData;import mesquite.lib.duties.DataWindowAssistantI;import mesquite.lib.table.MesquiteTable;/** ======================================================================== */public class TaxonNotesForMatrix extends DataWindowAssistantI  {	CharacterData data;	MesquiteTable table;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		return true;	}	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }	public void setTableAndData(MesquiteTable table, CharacterData data){		this.table = table;		this.data = data;	}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}	/*.................................................................................................................*/	/** Returns CompatibilityTest so other modules know if this is compatible with some object. */	public CompatibilityTest getCompatibilityTest(){		return new RequiresAnyDNAData();	}	/*.................................................................................................................*/   	public String getCellExplanation(int ic, int it){   		if (data == null)   			return null;   		Associable as = data.getTaxaInfo(false);	   	if (as == null)	   		return null;		String c = ChromaseqUtil.getStringAssociated(as, ChromaseqUtil.chromatogramReadsRef, it);		return c;   	}	/*.................................................................................................................*/    	 public String getName() {		return "Chromatogram Reads";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	/*.................................................................................................................*/  	 public String getExplanation() {		return "Shows what reads were the basis of the chromatograms.";   	 }}