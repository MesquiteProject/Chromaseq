/* Mesquite Chromaseq source code.  Copyright 2005-2011 David Maddison and Wayne Maddison.Version 1.0   December 2011Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.ColorQuality; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.meristic.lib.MeristicData;import mesquite.categ.lib.*;import mesquite.chromaseq.lib.*;import mesquite.cont.lib.*;//make display of ambiguities optional!!!!!/** ======================================================================== */public class ColorQuality extends DataWindowAssistantID implements CellColorer, CellColorerTaxa, CellColorerMatrix {	CharacterData data;	MesquiteTable table;	ContinuousData qualityData;	TableTool trimmableTool, restoreTool, pleaseCheckTool, pleaseCheck2Tool, pleaseCheck3Tool; 	MesquiteBoolean showAmbiguities;	MesquiteBoolean showMarks;	MesquiteMenuItemSpec ambM, markM;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		if (containerOfModule() instanceof MesquiteWindow) {			trimmableTool = new TableTool(this, "markAsTrimmable", getPath(), "thumbsDown.gif", 5,13,"Mark as trimmable", "This tool marks selected cells as trimmable.", MesquiteModule.makeCommand("setTrimmable",  this) , null, null);			restoreTool = new TableTool(this, "restore", getPath(), "thumbsUp.gif", 5,1,"Mark as not trimmable", "This tool marks selected cells as not trimmable.", MesquiteModule.makeCommand("restore",  this) , null, null);			//touchedTool = new TableTool(this, "touch", getPath(), "touched.gif", 1,8,"Mark as changed", "This tool marks selected cells as changed by hand.", MesquiteModule.makeCommand("touch",  this) , null, null);			pleaseCheckTool = new TableTool(this, "check", getPath(), "check.gif", 1,1,"Mark as to be checked", "This tool marks selected cells as to be checked.", MesquiteModule.makeCommand("check",  this) , null, null);			pleaseCheck2Tool = new TableTool(this, "check2", getPath(), "check2.gif", 1,1,"Mark as to be checked (2nd color)", "This tool marks selected cells as to be checked.", MesquiteModule.makeCommand("check2",  this) , null, null);			pleaseCheck3Tool = new TableTool(this, "check3", getPath(), "check3.gif", 1,1,"Mark as to be checked (3rd color)", "This tool marks selected cells as to be checked.", MesquiteModule.makeCommand("check3",  this) , null, null);			restoreTool.setWorksOnRowNames(true);			pleaseCheckTool.setWorksOnRowNames(true);			pleaseCheck2Tool.setWorksOnRowNames(true);			pleaseCheck3Tool.setWorksOnRowNames(true);		//	touchedTool.setWorksOnRowNames(true);			trimmableTool.setWorksOnRowNames(true);		}		showAmbiguities = new MesquiteBoolean(true);		showMarks = new MesquiteBoolean(true);		return true;	}	/*.................................................................................................................*/	public Snapshot getSnapshot(MesquiteFile file) {		Snapshot temp = new Snapshot();		temp.addLine("toggleAmbiguities " + showAmbiguities.toOffOnString());		temp.addLine("toggleMarks " + showMarks.toOffOnString());		return temp;	}	/*.................................................................................................................*/	public Object doCommand(String commandName, String arguments, CommandChecker checker) {		if (checker.compare(this.getClass(),  "Marks selected cells as trimmable", "[column][row]", commandName, "setTrimmable")) {			mark(arguments, ChromaseqUtil.TRIMMABLE);		}		else if (checker.compare(this.getClass(),  "Marks selected cells as not trimmable", "[column][row]", commandName, "restore")) {			mark(arguments, ChromaseqUtil.NORMAL);		}		else if (checker.compare(this.getClass(),  "Marks selected cells as manually changed", "[column][row]", commandName, "touch")) {			mark(arguments, ChromaseqUtil.MANUALLYCHANGED);		}		else if (checker.compare(this.getClass(),  "Marks selected cells as to be checked", "[column][row]", commandName, "check")) {			mark(arguments, ChromaseqUtil.CHECK);		}		else if (checker.compare(this.getClass(),  "Marks selected cells as to be checked", "[column][row]", commandName, "check2")) {			mark(arguments, ChromaseqUtil.CHECK2);		}		else if (checker.compare(this.getClass(),  "Marks selected cells as to be checked", "[column][row]", commandName, "check3")) {			mark(arguments, ChromaseqUtil.CHECK3);		}		else if (checker.compare(this.getClass(), "Sets whether ambiguities are shown", "[on; off]", commandName, "toggleAmbiguities")) {			showAmbiguities.toggleValue(parser.getFirstToken(arguments));			if (table != null)				table.repaintAll();			parametersChanged();		}		else if (checker.compare(this.getClass(), "Sets whether marks are shown", "[on; off]", commandName, "toggleMarks")) {			showMarks.toggleValue(parser.getFirstToken(arguments));			if (table != null)				table.repaintAll();			parametersChanged();		}		else			return  super.doCommand(commandName, arguments, checker);		return null;	}		/*.................................................................................................................*	public void dispose() {		super.dispose();		if (data!=null)			data.removeListener(this);	}	/*.................................................................................................................*  	 public void checkIfAnyChromaseqData(){  		 ChromaseqUtil.getQualityData(data);		boolean b = false;		if (data!=null) {			Associable tInfo= data.getTaxaInfo(false);			if (tInfo!=null)				b = tInfo.anyAssociatedObject(ChromaseqUtil.aceRef);					}		if (b && !ChromaseqUtil.validChromaseqMatrix(data))			b=false; 	 }	/*.................................................................................................................*/	void mark(String arguments, int i){		if (table!=null && data !=null){			MesquiteInteger io = new MesquiteInteger(0);			int firstColumnTouched= MesquiteInteger.fromString(arguments, io);			int firstRowTouched= MesquiteInteger.fromString(arguments, io);			if (!table.rowLegal(firstRowTouched)|| (firstColumnTouched != -1 && !table.columnLegal(firstColumnTouched)))				return;			if ((table.isCellSelected(firstColumnTouched, firstRowTouched))||(table.isRowSelected(firstRowTouched))||(table.isColumnSelected(firstColumnTouched))) {				markSelectedCells(table, data, firstColumnTouched, firstRowTouched, i); // the touched cell or column is selected; therefore, just fill the selection.			}			else {			//	table.deselectAll();			//	table.selectCell(firstColumnTouched, firstRowTouched);			//	markSelectedCells(table, data, firstColumnTouched, firstRowTouched, i); // the touched cell or column is selected; therefore, just fill the selection.				setFlag(firstColumnTouched, firstRowTouched, i, true);			}		}	}	/*.................................................................................................................*/	public void markSelectedCells(MesquiteTable table, CharacterData data, int firstColumnTouched, int firstRowTouched, int flag) {		boolean success = false;		if (table.anyRowNameSelected()) {			if (table.isRowNameSelected(firstRowTouched)) {					for (int j=0; j<table.getNumRows(); j++)						if (table.isRowNameSelected(j)) {							setFlag(-1, j, flag, false);						}				success = true;			}		}		if (table.anyCellSelected()) {			if (table.isCellSelected(firstColumnTouched, firstRowTouched)) {				for (int i=0; i<table.getNumColumns(); i++)					for (int j=0; j<table.getNumRows(); j++)						if (table.isCellSelected(i,j)) {							setFlag(i, j, flag, false);						}				success = true;			}		}		if (table.anyRowSelected()) {			if (table.isRowSelected(firstRowTouched)) {				for (int j=0; j<table.getNumRows(); j++) {					if (table.isRowSelected(j))						for (int i=0; i<table.getNumColumns(); i++)							setFlag(i, j, flag, false);				}				success = true;			}		}		if (table.anyColumnSelected()) {			if (table.isColumnSelected(firstColumnTouched)) {				for (int i=0; i<table.getNumColumns(); i++){					if (table.isColumnSelected(i))						for (int j=0; j<table.getNumRows(); j++) 							setFlag(i, j, flag, false);				}				success = true;			}		}		if (success){			table.repaintAll();			data.notifyListeners(this, new Notification(MesquiteListener.ANNOTATION_CHANGED));		}	}	/*.................................................................................................................*/	private void setFlag(int ic, int it, int c, boolean pleaseRedraw){		if (data == null)			return;		if (ic<0 && it<0){		}		else if (ic<0) { //taxon			Associable tInfo = data.getTaxaInfo(true);			if (c == ChromaseqUtil.NORMAL)				ChromaseqUtil.setLongAssociated(tInfo, ChromaseqUtil.chromaseqCellFlagsNameRef, it, MesquiteLong.unassigned); 			else				ChromaseqUtil.setLongAssociated(tInfo, ChromaseqUtil.chromaseqCellFlagsNameRef, it, c); 		}		else if (it < 0){ //character			if (c == ChromaseqUtil.NORMAL)				ChromaseqUtil.setLongAssociated(data, ChromaseqUtil.chromaseqCellFlagsNameRef, ic, MesquiteLong.unassigned); 			else				ChromaseqUtil.setLongAssociated(data, ChromaseqUtil.chromaseqCellFlagsNameRef, ic, c);		}		else if (!MesquiteInteger.isCombinable(c) || c<0 || c == ChromaseqUtil.NORMAL){			ChromaseqUtil.setIntegerCellObject(data,ChromaseqUtil.chromaseqCellFlagsNameRef, ic, it, null);		}		else {			MesquiteInteger ms = new MesquiteInteger(c);			ChromaseqUtil.setIntegerCellObject(data,ChromaseqUtil.chromaseqCellFlagsNameRef, ic, it, ms);		}		if (pleaseRedraw)			table.redrawCell(ic,it);	}			private int getFlag(int ic, int it){		if (data == null)			return 0;		if (ic<0){  //taxon			Associable tInfo = data.getTaxaInfo(false);			if (tInfo == null)				return ChromaseqUtil.NORMAL;			long c = ChromaseqUtil.getLongAssociated(tInfo,ChromaseqUtil.chromaseqCellFlagsNameRef, it);			if (MesquiteLong.isCombinable(c))				return (int)c;		}		else if (it<0){ //character			long c = ChromaseqUtil.getLongAssociated(data,ChromaseqUtil.chromaseqCellFlagsNameRef, ic);			if (MesquiteLong.isCombinable(c))				return (int)c;		}		else {			return ChromaseqUtil.getIntegerCellObject(data, ChromaseqUtil.chromaseqCellFlagsNameRef, ic, it);		}		return MesquiteInteger.unassigned;	}	public void viewChanged(){	}	boolean wasActive = false;	boolean everAdded = false;	public boolean setActiveColors(boolean active){		if ( trimmableTool != null){		/*	if (wasActive && !active){				((MesquiteWindow)containerOfModule()).removeTool(trimmableTool);				((MesquiteWindow)containerOfModule()).removeTool(restoreTool);				((MesquiteWindow)containerOfModule()).removeTool(touchedTool);				((MesquiteWindow)containerOfModule()).removeTool(pleaseCheckTool);				deleteMenuItem(ambM);				deleteMenuItem(markM);				resetContainingMenuBar();			}			else*/				if (!wasActive && active && !everAdded){				((MesquiteWindow)containerOfModule()).addTool(trimmableTool);				((MesquiteWindow)containerOfModule()).addTool(restoreTool);		//		((MesquiteWindow)containerOfModule()).addTool(touchedTool);				((MesquiteWindow)containerOfModule()).addTool(pleaseCheckTool);				((MesquiteWindow)containerOfModule()).addTool(pleaseCheck2Tool);				((MesquiteWindow)containerOfModule()).addTool(pleaseCheck3Tool);				ambM = addCheckMenuItem(null, "Show Ambiguities", makeCommand("toggleAmbiguities", this), showAmbiguities);				markM = addCheckMenuItem(null, "Show Marked Cells", makeCommand("toggleMarks", this), showMarks);				resetContainingMenuBar();				everAdded = true;			}		}		wasActive = active;		return true; 	}	/*.................................................................................................................*/	public boolean isSubstantive(){		return false;	}	Associable tInfoData;	public void setTableAndData(MesquiteTable table, CharacterData data){		this.table = table;		this.data = data;		if (data != null)			tInfoData = data.getTaxaInfo(false);	}	/*.................................................................................................................*/	public boolean hasDisplayModifications(){		return false;	}	private int getQuality(int ic, int it){		if (data == null || qualityData == null) 			return 0;		return (int)(ChromaseqUtil.getQualityScoreForEditedMatrixBase(data,ic, it) + 0.01);		/*   		Object obj = data.getCellObject(qualityNameRef, ic, it); //IF USED use  ChromaseqUtil.getIntegerCellObject   		if (obj instanceof MesquiteInteger)   			return ((MesquiteInteger)obj).getValue();   		return 0;		 */	}	private boolean hasChromatograms(int it){		long num = 0;		if (tInfoData != null)			num = ChromaseqUtil.getLongAssociated(tInfoData,ChromaseqUtil.numChromatogramsRef, it);		if (num != 0 && MesquiteLong.isCombinable(num))			return num >0L;			return false;	}	private boolean isSingleRead(int it){		long num = 0;		if (tInfoData != null)			num = ChromaseqUtil.getLongAssociated(tInfoData,ChromaseqUtil.numChromatogramsRef, it);		if (num != 0 && MesquiteLong.isCombinable(num))			return num==1L;		return false;	}	int count = 0;		/*-----------------------*/	private double getQualityTaxon(int it){		if (data == null || qualityData == null)			return 0;		double sum = 0;		int num = 0;		int numChars = data.getNumChars(false);		for (int ic = 0; ic<numChars; ic++){			if (!data.isInapplicable(ic, it) && !data.isUnassigned(ic, it)) {				double d = ChromaseqUtil.getQualityScoreForEditedMatrixBase(data,ic, it);				if (MesquiteDouble.isCombinable(d) && d>=0 && d<=100){					sum += d/100.0;					num++;				}			}		}		if (num == 0)			return 0;		return sum*1.0/num;		/*   		Object obj = data.getCellObject(qualityNameRef, ic, it);//IF USED use  ChromaseqUtil.getIntegerCellObject   		if (obj instanceof MesquiteInteger)   			return ((MesquiteInteger)obj).getValue();   		return 0;		 */	}	public String getColorsExplanation(){		return null;	}	public String getCellString(int ic, int it){		if (it<0 || ic<0 ||  !isActive())			return null;		String expl = "";		if (ic<0)  {			//taxon; 			double seqQual = getQualityTaxon(it);			expl += " Quality of sequence " + seqQual;		}		else {			int color = getFlag(ic, it);			if (showMarks.getValue()){				if (color == ChromaseqUtil.TRIMMABLE) //trimmable					expl += " Trimmable.";				else if (color == ChromaseqUtil.MANUALLYCHANGED) //touched					expl += " Modified by hand.";				else if (color == ChromaseqUtil.CHECK) //please check					expl += " Note!";				else if (color == ChromaseqUtil.CHECK2) //please check					expl += " Note!";				else if (color == ChromaseqUtil.CHECK3) //please check					expl += " Note!";			}			if (data.isInapplicable(ic, it)){				if (hasChromatograms(it))					expl += " No data but chromatogram available";				else					expl += " Gap or beyond end of sequences";			}			else {				int quality = getQuality(ic, it);				if (showAmbiguities.getValue()) {					long st = ((CategoricalData)data).getState(ic, it);					if (CategoricalState.isUnassigned(st) || CategoricalState.hasMultipleStates(st))						expl += " Ambiguous coding";					else						expl += "Quality of call: " + MesquiteInteger.toString(quality);				}				else 					expl += "Quality of call: " + MesquiteInteger.toString(quality);			}		}		//count sequence		int sLength = 0;		for (int icc = 0; icc<data.getNumChars(false); icc++)			if (!data.isInapplicable(icc, it))				sLength++;		//count trimmable		int tLength = 0;		for (int icc = 0; icc<data.getNumChars(false); icc++)			if (getFlag(icc, it) == ChromaseqUtil.TRIMMABLE)				tLength++;		return expl + " (Sequence length " + sLength + "; trimmable " + tLength + ")";	}	ColorRecord[] legend;	public ColorRecord[] getLegendColors(){		if (legend == null) {			legend = new ColorRecord[14];			legend[0] = AceFile.colorHighQuality;			legend[1] = AceFile.colorMediumQuality;			legend[2] = AceFile.colorLowQuality;			legend[3] = AceFile.colorHighQualitySingleRead;			legend[4] = AceFile.colorMediumQualitySingleRead;			legend[5] = AceFile.colorLowQualitySingleRead;			legend[6] = AceFile.colorInapplicable;			legend[7] = AceFile.colorAmbiguous;			legend[8] = AceFile.colorTrimmable;			legend[9] = AceFile.colorManuallyChanged;			legend[10] = AceFile.colorPleaseRecheck;			legend[11] = AceFile.colorPleaseRecheck2;			legend[12] = AceFile.colorPleaseRecheck3;			legend[13] = AceFile.colorNoQuality;		}		return legend;	}	/*.................................................................................................................*/	public Color getCellColor(int ic, int it){		qualityData = ChromaseqUtil.getQualityData(data);		if (qualityData==null)			return Color.white;		if (it < 0) 			return Color.white;		if (ic<0)  {			//taxon; 			double seqQual = getQualityTaxon(it);			 if (isSingleRead(it))					return AceFile.getColorOfQualitySingleRead((int)(100*seqQual));				else					return AceFile.getColorOfQuality((int)(100*seqQual));			//return MesquiteColorTable.getDefaultColor(50, (int)(50-seqQual), MesquiteColorTable.GRAYSCALE);		}		int color = getFlag(ic, it);		if (showMarks.getValue()){						if (color == ChromaseqUtil.TRIMMABLE) //trimmable				return AceFile.colorTrimmable.getColor();			else if (color == ChromaseqUtil.MANUALLYCHANGED){ //manually changed		/*		if (data!=null) {					if (ChromaseqUtil.editedMatrixBaseSameAsOriginal(data, ic, it)){  // check to see if it is really changed; if not, then remove flag						setFlag(ic,it,ChromaseqUtil.NORMAL, false);					} else						return AceFile.colorManuallyChanged.getColor();				}				else 				*/				return AceFile.colorManuallyChanged.getColor();			}			else if (color == ChromaseqUtil.CHECK) //please check				return AceFile.colorPleaseRecheck.getColor();			else if (color == ChromaseqUtil.CHECK2){ //please check				return AceFile.colorPleaseRecheck2.getColor();			} 			else if (color == ChromaseqUtil.CHECK3){ //please check				return AceFile.colorPleaseRecheck3.getColor();			} 		} 		//if (!ChromaseqUtil.editedMatrixBaseSameAsOriginal(data, ic, it)){  // check to see if it is really changed; if yes, then add flag		//	setFlag(ic,it,ChromaseqUtil.MANUALLYCHANGED, false);		//	return AceFile.colorManuallyChanged.getColor();	//	}				if (data.isInapplicable(ic, it)){		//	if (hasChromatograms(it))		//		return AceFile.colorChromNoSeq.getColor();			return AceFile.colorInapplicable.getColor();		}		if (showAmbiguities.getValue()) {			long st = ((CategoricalData)data).getState(ic, it);			if (CategoricalState.isUnassigned(st) || CategoricalState.hasMultipleStates(st))				return AceFile.colorAmbiguous.getColor();		}		int quality = getQuality(ic, it);		if (!(data instanceof DNAData))			return MesquiteColorTable.getDefaultColor(50, (100-quality)/2, MesquiteColorTable.GRAYSCALE);		/*else if (CategoricalState.isLowerCase(((DNAData)data).getStateRaw(ic, it)) || data.isUnassigned(ic, it))     			return MesquiteColorTable.getDefaultColor(50, (100-quality)/2, MesquiteColorTable.BLUESCALE);   		else    			return MesquiteColorTable.getDefaultColor(50, (100-quality)/2, MesquiteColorTable.GREENSCALE);*/		else if (isSingleRead(it))			return AceFile.getColorOfQualitySingleRead(quality);		else			return AceFile.getColorOfQuality(quality);	}	/*.................................................................................................................*/	/** Returns CompatibilityTest so other modules know if this is compatible with some object. */	public CompatibilityTest getCompatibilityTest(){		return new RequiresAnyDNAData();	}	/*.................................................................................................................*/	/*.................................................................................................................*/	public String getName() {		return "Quality from Phred/Phrap";	}	/*.................................................................................................................*/	public String getVersion() {		return null;	}	/*.................................................................................................................*/	public String getExplanation() {		return "Colors cells by their quality scores from phred and phrap.";	}}