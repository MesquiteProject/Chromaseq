/* Mesquite Chromaseq source code.  Copyright 2005-2011 David Maddison and Wayne Maddison.Version 1.0   December 2011Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.chromaseq.ColorCCalledBase; import java.util.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;import mesquite.lib.ui.ColorRecord;import mesquite.categ.lib.*;import mesquite.chromaseq.lib.*;//make display of ambiguities optional!!!!!/** ======================================================================== */public class ColorCCalledBase extends DataWindowAssistantID implements CellColorer, CellColorerTaxa {	CharacterData data;	MesquiteTable table;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		return true;	}	public void viewChanged(){	}	boolean wasActive = false;	public boolean setActiveColors(boolean active){		wasActive = active;		return true; 	}	/*.................................................................................................................*/	public boolean isSubstantive(){		return false;	}	Associable tInfoData;	public void setTableAndData(MesquiteTable table, CharacterData data){		this.table = table;		this.data = data;		if (data != null)			tInfoData = data.getTaxaInfo(false);	}	/*.................................................................................................................*/	public boolean hasDisplayModifications(){		return false;	}	public String getColorsExplanation(){		return null;	}	ColorRecord[] legend;	public ColorRecord[] getLegendColors(){		if (legend == null) {			legend = new ColorRecord[2];			legend[0] = new ColorRecord(Color.gray, "Base called by Phred-Phrap/Mesquite");			legend[1] = new ColorRecord(Color.black, "Base called by User");		}		return legend;	}	/*.................................................................................................................*/	public Color getCellColor(int ic, int it){		if (ChromaseqUtil.baseCalled(ic, it , data)) {			return Color.black;		}		if (ic >=0 && data.isInapplicable(ic, it))			return Color.lightGray;		if (ic>=0)			return Color.gray;		return Color.black;	}	/*.................................................................................................................*/	/** Returns CompatibilityTest so other modules know if this is compatible with some object. */	public CompatibilityTest getCompatibilityTest(){		return new RequiresAnyDNAData();	}	/*.................................................................................................................*/	/*.................................................................................................................*/	public String getName() {		return "User-Called Bases in Chromaseq";	}	/*.................................................................................................................*/	public String getVersion() {		return null;	}	/*.................................................................................................................*/	public String getExplanation() {		return "Colors text black if bases were called in Chromaseq.";	}}